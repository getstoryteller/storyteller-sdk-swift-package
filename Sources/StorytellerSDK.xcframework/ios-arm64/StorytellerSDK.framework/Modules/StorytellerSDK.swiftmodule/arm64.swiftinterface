// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name StorytellerSDK
import AVFoundation
import AVKit
import AsyncDisplayKit
import AudioToolbox
import CommonCrypto
import CryptoKit
import Foundation
import Photos
import StoreKit
import Swift
import UIKit
import WebKit
import os
public enum PublicAsset {
  public static let iconQuizAnswerCorrect: StorytellerSDK.PublicImages
  public static let iconQuizAnswerIncorrect: StorytellerSDK.PublicImages
  public static let backgroundTextPlaceholderRound: StorytellerSDK.PublicImages
  public static let backgroundTextPlaceholderSquareDark: StorytellerSDK.PublicImages
  public static let backgroundTextPlaceholderSquareLight: StorytellerSDK.PublicImages
  public static let backgroundTextPlaceholderSquare: StorytellerSDK.PublicImages
  public static let bgDiagonalStripeImageAnswer: StorytellerSDK.PublicImages
  public static let bgDiagonalStripeTextLargeAnswer: StorytellerSDK.PublicImages
  public static let bgDiagonalStripeTextSmallAnswer: StorytellerSDK.PublicImages
  public static let feedBack: StorytellerSDK.PublicImages
  public static let feedPlay: StorytellerSDK.PublicImages
  public static let feedShare: StorytellerSDK.PublicImages
  public static let gradientBottom: StorytellerSDK.PublicImages
  public static let iconArrowUp: StorytellerSDK.PublicImages
  public static let iconCloseBlack: StorytellerSDK.PublicImages
  public static let iconCloseWhite: StorytellerSDK.PublicImages
  public static let iconInstructionBackBlack: StorytellerSDK.PublicImages
  public static let iconInstructionBackWhite: StorytellerSDK.PublicImages
  public static let iconInstructionForwardBlack: StorytellerSDK.PublicImages
  public static let iconInstructionForwardWhite: StorytellerSDK.PublicImages
  public static let iconInstructionPauseBlack: StorytellerSDK.PublicImages
  public static let iconInstructionPauseWhite: StorytellerSDK.PublicImages
  public static let iconInstructionSwipeBlack: StorytellerSDK.PublicImages
  public static let iconInstructionSwipeWhite: StorytellerSDK.PublicImages
  public static let iconShare: StorytellerSDK.PublicImages
  public static let placeholderGradientVerticalDark: StorytellerSDK.PublicImages
  public static let placeholderGradientVerticalLight: StorytellerSDK.PublicImages
  public static let placeholderGradientVertical: StorytellerSDK.PublicImages
  public static let playerGradientBottom: StorytellerSDK.PublicImages
  public static let playerGradientLeft: StorytellerSDK.PublicImages
  public static let playerGradientTop: StorytellerSDK.PublicImages
  public static let pollAnswerGradient: StorytellerSDK.PublicImages
  public static let pollPlaceholderGradient: StorytellerSDK.PublicImages
  public static let webviewBack: StorytellerSDK.PublicImages
  public static let webviewNext: StorytellerSDK.PublicImages
  public static let webviewReload: StorytellerSDK.PublicImages
  public static let webviewSafari: StorytellerSDK.PublicImages
  public static let webviewShare: StorytellerSDK.PublicImages
}
public struct PublicImages {
  public var name: Swift.String {
    get
  }
  public typealias Image = UIKit.UIImage
  public var image: StorytellerSDK.PublicImages.Image {
    get
  }
}
extension UIImage {
  @available(macOS, deprecated, message: "This initializer is unsafe on macOS, please use the PublicImages.image property")
  convenience public init?(asset: StorytellerSDK.PublicImages)
}
@_inheritsConvenienceInitializers @objc public class PublicResources : ObjectiveC.NSObject {
  @objc public class var bundle: Foundation.Bundle {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
public enum StorytellerError : Foundation.LocalizedError {
  case invalidAPIKeyError(Swift.Error)
  case networkError(Swift.Error)
  case networkTimeoutError(Swift.Error)
  case jsonParseError
  public var cause: Swift.Error? {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
}
public struct UserActivity {
  public enum EventType : Swift.String {
    case OpenedStory
    case DismissedStory
    case SkippedPage
    case SkippedStory
    case CompletedPage
    case CompletedStory
    case SwipedUp
    case ShareButtonTapped
    case ShareSuccess
    case PreviousPage
    case PreviousStory
    case OpenedPage
    case OpenedAd
    case DismissedAd
    case SkippedAd
    case SwipedUpOnAd
    case PreviousAd
    case PausedAdPage
    case ResumedAdPage
    case ViewedAdPageComplete
    case ViewedAdPageFirstQuartile
    case ViewedAdPageMidpoint
    case ViewedAdPageThirdQuartile
    case FinishedAd
    case ReadyToPlay
    case MediaStarted
    case BufferingStarted
    case BufferingEnded
    case VotedPoll
    case TriviaQuizQuestionAnswered
    case TriviaQuizCompleted
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum Key {
    public static let ActivityType: Swift.String
    public static let ExternalId: Swift.String
  }
}
extension UIButton {
  public func setImage(_ image: UIKit.UIImage?)
}
extension UIImageView {
  public func setImage(_ image: UIKit.UIImage?)
}
public struct Category : Swift.Codable {
  public var name: Swift.String
  public var urlName: Swift.String
  public var externalId: Swift.String
  public init?(json: StorytellerSDK.JSON)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension Category : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: StorytellerSDK.Category, b: StorytellerSDK.Category) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct ClientAd : Swift.Codable {
  public let id: Swift.String
  public let advertiserName: Swift.String
  public let image: Swift.String?
  public let video: Swift.String?
  public let playcardUrl: Swift.String?
  public let duration: Swift.Double?
  public let trackingPixels: [StorytellerSDK.ClientTrackingPixel]
  public let swipeUp: StorytellerSDK.ClientAdSwipeUp?
  public init(id: Swift.String, advertiserName: Swift.String, image: Swift.String?, video: Swift.String?, playcardUrl: Swift.String?, duration: Swift.Double?, trackingPixels: [StorytellerSDK.ClientTrackingPixel], swipeUp: StorytellerSDK.ClientAdSwipeUp?)
  public var type: Swift.String {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ClientAdSwipeUp : Swift.Codable {
  public let urlOrStoreId: Swift.String
  public let type: StorytellerSDK.ClientAdSwipeUpKind
  public let text: Swift.String?
  @available(*, deprecated, renamed: "init(urlOrStoreId:type:)")
  public init(url: Swift.String, kind: StorytellerSDK.ClientAdSwipeUpKind, text: Swift.String? = nil)
  public init(urlOrStoreId: Swift.String, type: StorytellerSDK.ClientAdSwipeUpKind, text: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum ClientAdSwipeUpKind : Swift.String, Swift.Codable {
  case web
  case inApp
  case store
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public struct ClientStory : Swift.Codable {
  public let id: Swift.String
  public let pages: [Swift.String]
  public let categories: [StorytellerSDK.Category]
  public init(id: Swift.String, pages: [Swift.String], categories: [StorytellerSDK.Category])
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ClientTrackingPixel : Swift.Codable {
  public let eventType: Swift.String
  public let url: Swift.String
  public init(eventType: Swift.String = "impression", url: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum OpenStorytellerViewActionHandler {
  case willShow
  case failed(Swift.Error)
}
public typealias JSON = [Swift.String : Any]
public protocol Serializable {
  init?(json: StorytellerSDK.JSON)
  func serialize() -> StorytellerSDK.JSON?
}
extension Serializable {
  public func serialize() -> StorytellerSDK.JSON?
}
public struct UserActivityData {
  public let storyId: Swift.String?
  public let storyTitle: Swift.String?
  public let storyIndex: Swift.Int?
  public let storyPageCount: Swift.Int?
  public let storyReadStatus: Swift.String?
  public let pageId: Swift.String?
  public let pageIndex: Swift.Int?
  public let pageType: Swift.String?
  public let storyPlaybackMode: Swift.String
  public let pageHasSwipeUp: Swift.Bool?
  public let pageSwipeUpText: Swift.String?
  public let pageSwipeUpUrl: Swift.String?
  public let openedReason: Swift.String?
  public let dismissedReason: Swift.String?
  public let durationViewed: Swift.Float?
  public let pagesViewedCount: Swift.Int?
  public let advertiserName: Swift.String?
  public let adId: Swift.String?
  public let shareMethod: Swift.String?
  public let adView: UIKit.UIView?
  public let isInitialBuffering: Swift.Bool?
  public let timeSinceBufferingBegan: Foundation.TimeInterval?
  public let categories: [Swift.String]?
  public let pollAnswerId: Swift.String?
  public let triviaQuizId: Swift.String?
  public let triviaQuizTitle: Swift.String?
  public let triviaQuizScore: Swift.String?
  public let triviaQuizQuestionId: Swift.String?
  public let triviaQuizAnswerId: Swift.String?
}
public struct UserActivityStatus : Swift.Decodable {
  public let id: Swift.String
  public let tenantId: Swift.String
  public let readPages: [Swift.String]?
  public let pollAnswers: [Swift.String]?
  public let triviaQuizAnswers: [StorytellerSDK.UserActivityTriviaQuizAnswerStatus]?
  public init(from decoder: Swift.Decoder) throws
}
public struct UserActivityTriviaQuizAnswerStatus : Swift.Decodable {
  public let questionId: Swift.String
  public let answerId: Swift.String
  public init(from decoder: Swift.Decoder) throws
}
public struct UserInput {
  public var externalId: Swift.String?
  public init(externalId: Swift.String? = nil)
}
extension UserInput : StorytellerSDK.Serializable {
  public init?(json: StorytellerSDK.JSON)
  public func serialize() -> StorytellerSDK.JSON?
}
extension UserInput : Swift.Equatable {
  public static func == (lhs: StorytellerSDK.UserInput, rhs: StorytellerSDK.UserInput) -> Swift.Bool
}
public typealias VoidCompletion = () -> Swift.Void
public typealias ErrorCompletion = (Swift.Error) -> Swift.Void
public typealias ImageCompletion = (UIKit.UIImage?) -> Swift.Void
public class Storyteller {
  required public init()
  public static var isInitialized: Swift.Bool {
    get
  }
  public static var isPresentingStory: Swift.Bool {
    get
  }
  public static var customInstanceHost: Swift.String?
  public static let sharedInstance: StorytellerSDK.Storyteller
  public static var theme: StorytellerSDK.UITheme
  public static var version: Swift.String
  public static var currentUserId: Swift.String? {
    get
  }
  public static var currentApiKey: Swift.String? {
    get
  }
  public var delegate: StorytellerSDK.StorytellerDelegate? {
    get
    set
  }
  public static func dismissStoryView(animated: Swift.Bool, dismissReason: Swift.String? = nil, onComplete: (() -> Swift.Void)? = nil)
  public static func isStorytellerDeeplink(url: Foundation.URL) -> Swift.Bool
  @discardableResult
  public static func openDeeplink(url: Foundation.URL, onError: ((Swift.Error) -> Swift.Void)? = nil) -> Swift.Bool
  public static func openStory(id: Swift.String, onError: @escaping ((Swift.Error) -> Swift.Void) = { _ in })
  public static func openPage(id: Swift.String, onError: @escaping ((Swift.Error) -> Swift.Void) = { _ in })
  public func initialize(apiKey: Swift.String, userInput: StorytellerSDK.UserInput? = nil, categoriesToPreload: [Swift.String] = [], onComplete: @escaping StorytellerSDK.VoidCompletion = {}, onError: @escaping StorytellerSDK.ErrorCompletion = { _ in })
  public func openFeed(categoryExternalId: Swift.String, feedTitle: Swift.String?, feedTitleImage: UIKit.UIImage?, actionHandler: @escaping (StorytellerSDK.OpenStorytellerViewActionHandler) -> Swift.Void)
  @objc deinit
}
public protocol StorytellerDelegate {
  func onUserActivityOccurred(type: StorytellerSDK.UserActivity.EventType, data: StorytellerSDK.UserActivityData)
  func getAdsForList(stories: [StorytellerSDK.ClientStory], onComplete: @escaping ([StorytellerSDK.ClientAd?]) -> Swift.Void, onError: @escaping (Swift.Error) -> Swift.Void)
  func configureSwipeUpWebView(configuration: inout WebKit.WKWebViewConfiguration)
  func userSwipedUpToApp(swipeUpUrl: Swift.String)
}
extension StorytellerDelegate {
  public func getAdsForList(stories: [StorytellerSDK.ClientStory], onComplete: @escaping ([StorytellerSDK.ClientAd?]) -> Swift.Void, onError: @escaping (Swift.Error) -> Swift.Void)
}
extension StorytellerDelegate {
  public func onUserActivityOccurred(type: StorytellerSDK.UserActivity.EventType, data: StorytellerSDK.UserActivityData)
  public func configureSwipeUpWebView(configuration: inout WebKit.WKWebViewConfiguration)
  public func userSwipedUpToApp(swipeUpUrl: Swift.String)
}
@objc @_hasMissingDesignatedInitializers public class StorytellerGridView : StorytellerSDK.StorytellerListView {
  public init()
  @objc deinit
  weak public var gridDelegate: StorytellerSDK.StorytellerGridViewDelegate?
  override public var theme: StorytellerSDK.UITheme? {
    get
    set
  }
  public func reloadData(cell: UIKit.UITableViewCell, tableView: UIKit.UITableView)
  override public func prepareForReuse()
}
public protocol StorytellerGridViewDelegate : AnyObject {
  func contentSizeDidChange(_ size: CoreGraphics.CGSize)
}
@objc @_hasMissingDesignatedInitializers public class StorytellerListView : UIKit.UIView {
  @objc deinit
  public var categories: [Swift.String] {
    get
    set
  }
  public var delegate: StorytellerSDK.StorytellerListViewDelegate? {
    get
    set
  }
  @objc @IBInspectable public var cellType: Swift.String {
    @objc get
    @objc set
  }
  public var theme: StorytellerSDK.UITheme? {
    get
    set
  }
  public var uiStyle: StorytellerSDK.UIStyle {
    get
    set
  }
  public func prepareForReuse()
  public func openStory(id: Swift.String = "", animated: Swift.Bool = true, onError: ((StorytellerSDK.StorytellerListViewError) -> Swift.Void)? = nil)
  public func openPage(id: Swift.String = "", animated: Swift.Bool = true, onError: ((StorytellerSDK.StorytellerListViewError) -> Swift.Void)? = nil)
  public func openDeeplink(url: Foundation.URL, onError: ((StorytellerSDK.StorytellerListViewError) -> Swift.Void)? = nil)
  public func reloadData()
  @available(*, deprecated, message: "the method has been moved. Please use `Storyteller.dismissStoryView`")
  public func dismissStoryView(animated: Swift.Bool, dismissReason: Swift.String? = nil, onComplete: (() -> Swift.Void)? = nil)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
public enum StorytellerListViewCellType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case square
  case round
  public init?(rawValue: Swift.String)
  public typealias AllCases = [StorytellerSDK.StorytellerListViewCellType]
  public typealias RawValue = Swift.String
  public static var allCases: [StorytellerSDK.StorytellerListViewCellType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public protocol StorytellerListViewDelegate {
  func onStoriesDataLoadStarted()
  func onStoriesDataLoadComplete(success: Swift.Bool, error: Swift.Error?, dataCount: Swift.Int)
  func onStoryDismissed()
  func tileBecameVisible(index: Swift.Int)
}
extension StorytellerListViewDelegate {
  public func onStoriesDataLoadStarted()
  public func onStoriesDataLoadComplete(success: Swift.Bool, error: Swift.Error?, dataCount: Swift.Int)
  public func onStoryDismissed()
  public func tileBecameVisible(index: Swift.Int)
}
public enum StorytellerListViewError : Swift.Error {
  case pageNotFound
  case storyNotFound
  case storyWithPageNotFound
  case noStoriesFound
  case fetchingAdsFailed
  case fetchingStoriesFailed
  public static func == (a: StorytellerSDK.StorytellerListViewError, b: StorytellerSDK.StorytellerListViewError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum StorytellerListViewStyle : Swift.String, Swift.Codable, Swift.CaseIterable {
  case auto
  case dark
  public init?(rawValue: Swift.String)
  public typealias AllCases = [StorytellerSDK.StorytellerListViewStyle]
  public typealias RawValue = Swift.String
  public static var allCases: [StorytellerSDK.StorytellerListViewStyle] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
@objc @_hasMissingDesignatedInitializers public class StorytellerRowView : StorytellerSDK.StorytellerListView {
  public init()
  @objc deinit
}
public enum Alignment : Swift.String, Swift.Codable {
  case left
  case center
  case right
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
open class FontProvider : Swift.Codable {
  open func font(weight: StorytellerSDK.StorytellerFontWeight, size: CoreGraphics.CGFloat) -> UIKit.UIFont?
  public init()
  @objc deinit
  open func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
public enum StorytellerFontWeight {
  case medium
  case heavy
  case bold
  case semibold
  case regular
  case black
  public static func == (a: StorytellerSDK.StorytellerFontWeight, b: StorytellerSDK.StorytellerFontWeight) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
open class InstructionsIconProvider {
  public static var defaultValue: StorytellerSDK.InstructionsIconProvider {
    get
  }
  public var forwardIconImage: UIKit.UIImage?
  public var pauseIconImage: UIKit.UIImage?
  public var backIconImage: UIKit.UIImage?
  public var swipeIconImage: UIKit.UIImage?
  public var closeButtonImage: UIKit.UIImage?
  public init()
  @objc deinit
}
public struct InstructionIcons : Swift.Codable {
  public init(forward: UIKit.UIImage? = nil, pause: UIKit.UIImage? = nil, back: UIKit.UIImage? = nil, move: UIKit.UIImage? = nil)
  public init(from decoder: Swift.Decoder) throws
  public var forward: UIKit.UIImage?
  public var pause: UIKit.UIImage?
  public var back: UIKit.UIImage?
  public var move: UIKit.UIImage?
  public func encode(to encoder: Swift.Encoder) throws
}
extension InstructionIcons : Swift.Equatable {
  public static func == (lhs: StorytellerSDK.InstructionIcons, rhs: StorytellerSDK.InstructionIcons) -> Swift.Bool
}
public struct PlayerIcons : Swift.Codable {
  public var share: UIKit.UIImage?
  public var refresh: UIKit.UIImage?
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum TextCasing : Swift.String, Swift.Codable {
  case `default`
  case lower
  case upper
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
extension UIButton {
  public func setTitle(_ title: Swift.String?, for state: UIKit.UIControl.State, casing: StorytellerSDK.TextCasing? = .default)
}
extension Theme : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Theme.Colors : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Theme.Lists : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Theme.StoryTiles.LiveChip : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Theme.StoryTiles.CircularTile : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Theme.Player : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Theme.Buttons : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Theme.Instructions : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Theme.Instructions.Button : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Theme.EngagementUnits.Poll : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Theme.EngagementUnits.TriviaQuiz : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Theme.StoryTiles.CircularTile.Title : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Theme.StoryTiles.RectangularTile.Title : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Theme.StoryTiles.RectangularTile.UnreadIndicator : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
extension Theme.Colors.Text : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Theme {
  public struct Colors {
    public var primary: UIKit.UIColor
    public var success: UIKit.UIColor
    public var alert: UIKit.UIColor
    public var white: StorytellerSDK.Theme.Colors.Text
    public var black: StorytellerSDK.Theme.Colors.Text
    public struct Text {
      public var primary: UIKit.UIColor
      public var secondary: UIKit.UIColor?
      public var tertiary: UIKit.UIColor?
    }
  }
  public struct Primitives : Swift.Codable {
    public var cornerRadius: CoreGraphics.CGFloat
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Lists {
    public var backgroundColor: UIKit.UIColor?
    public var row: StorytellerSDK.Theme.Lists.Row
    public var grid: StorytellerSDK.Theme.Lists.Grid
    public var home: StorytellerSDK.Theme.Lists.Home
    public struct Row : Swift.Codable {
      public var tileSpacing: CoreGraphics.CGFloat
      public var startInset: CoreGraphics.CGFloat
      public var endInset: CoreGraphics.CGFloat
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public struct Grid : Swift.Codable {
      public var tileSpacing: CoreGraphics.CGFloat
      public var columns: Swift.Int
      public var topInset: CoreGraphics.CGFloat
      public var bottomInset: CoreGraphics.CGFloat
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public struct Home : Swift.Codable {
      public var startInset: CoreGraphics.CGFloat
      public var endInset: CoreGraphics.CGFloat
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
  }
  public struct StoryTiles : Swift.Codable {
    public struct Chip : Swift.Codable {
      public var textSize: CoreGraphics.CGFloat
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public struct LiveChip {
      public var readImage: UIKit.UIImage?
      public var unreadImage: UIKit.UIImage?
      public var readBackgroundColor: UIKit.UIColor?
      public var unreadBackgroundColor: UIKit.UIColor?
      public var textColor: UIKit.UIColor?
    }
    public struct Title : Swift.Codable {
      public var textSize: CoreGraphics.CGFloat
      public var lineHeight: CoreGraphics.CGFloat
      public var alignment: StorytellerSDK.Alignment
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public struct CircularTile {
      public var title: StorytellerSDK.Theme.StoryTiles.CircularTile.Title
      public var unreadIndicatorColor: UIKit.UIColor?
      public var readIndicatorColor: UIKit.UIColor
      public struct Title {
        public var readTextColor: UIKit.UIColor?
        public var unreadTextColor: UIKit.UIColor?
      }
    }
    public struct RectangularTile : Swift.Codable {
      public var padding: CoreGraphics.CGFloat
      public var title: StorytellerSDK.Theme.StoryTiles.RectangularTile.Title
      public var chip: StorytellerSDK.Theme.StoryTiles.RectangularTile.Chip
      public var unreadIndicator: StorytellerSDK.Theme.StoryTiles.RectangularTile.UnreadIndicator
      public struct Title {
        public var textColor: UIKit.UIColor?
      }
      public struct Chip : Swift.Codable {
        public var alignment: StorytellerSDK.Alignment
        public func encode(to encoder: Swift.Encoder) throws
        public init(from decoder: Swift.Decoder) throws
      }
      public struct UnreadIndicator {
        public var image: UIKit.UIImage?
        public var backgroundColor: UIKit.UIColor?
        public var textColor: UIKit.UIColor?
        public var textSize: CoreGraphics.CGFloat
      }
      public func encode(to encoder: Swift.Encoder) throws
      public init(from decoder: Swift.Decoder) throws
    }
    public var chip: StorytellerSDK.Theme.StoryTiles.Chip
    public var liveChip: StorytellerSDK.Theme.StoryTiles.LiveChip
    public var title: StorytellerSDK.Theme.StoryTiles.Title
    public var circularTile: StorytellerSDK.Theme.StoryTiles.CircularTile
    public var rectangularTile: StorytellerSDK.Theme.StoryTiles.RectangularTile
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct EngagementUnits : Swift.Codable {
    public var poll: StorytellerSDK.Theme.EngagementUnits.Poll
    public var triviaQuiz: StorytellerSDK.Theme.EngagementUnits.TriviaQuiz
    public struct Poll {
      public var answerTextColor: UIKit.UIColor?
      public var percentBarColor: UIKit.UIColor
      public var selectedAnswerBorderColor: UIKit.UIColor?
      public var answeredMessageTextColor: UIKit.UIColor?
      public var selectedAnswerBorderImage: UIKit.UIImage?
      public var showVoteCount: Swift.Bool
      public var showPercentBarBackground: Swift.Bool
    }
    public struct TriviaQuiz {
      public var correctColor: UIKit.UIColor?
      public var incorrectColor: UIKit.UIColor?
    }
    public func encode(to encoder: Swift.Encoder) throws
    public init(from decoder: Swift.Decoder) throws
  }
  public struct Player {
    public var icons: StorytellerSDK.PlayerIcons
    public var liveChipImage: UIKit.UIImage?
    public var showStoryIcon: Swift.Bool
    public var showTimestamp: Swift.Bool
    public var showShareButton: Swift.Bool
  }
  public struct Buttons {
    public var backgroundColor: UIKit.UIColor?
    public var textColor: UIKit.UIColor?
    public var textCase: StorytellerSDK.TextCasing
    public var cornerRadius: CoreGraphics.CGFloat?
  }
  public struct Instructions {
    public var show: Swift.Bool
    public var headingColor: UIKit.UIColor?
    public var subHeadingColor: UIKit.UIColor?
    public var backgroundColor: UIKit.UIColor?
    public var icons: StorytellerSDK.InstructionIcons?
    public var button: StorytellerSDK.Theme.Instructions.Button
    public struct Button {
      public var textColor: UIKit.UIColor?
      public var backgroundColor: UIKit.UIColor?
    }
  }
  public var colors: StorytellerSDK.Theme.Colors
  public var customFont: StorytellerSDK.FontProvider
  public var primitives: StorytellerSDK.Theme.Primitives
  public var lists: StorytellerSDK.Theme.Lists
  public var storyTiles: StorytellerSDK.Theme.StoryTiles
  public var player: StorytellerSDK.Theme.Player
  public var buttons: StorytellerSDK.Theme.Buttons
  public var instructions: StorytellerSDK.Theme.Instructions
  public var engagementUnits: StorytellerSDK.Theme.EngagementUnits
}
@_hasMissingDesignatedInitializers public class ThemeBuilder {
  @objc deinit
}
public enum UIStyle : Swift.String, Swift.Codable, Swift.CaseIterable {
  case light
  case dark
  case auto
  public init?(rawValue: Swift.String)
  public typealias AllCases = [StorytellerSDK.UIStyle]
  public typealias RawValue = Swift.String
  public static var allCases: [StorytellerSDK.UIStyle] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct UITheme : Swift.Codable {
  public init()
  public var dark: StorytellerSDK.Theme
  public var light: StorytellerSDK.Theme
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension StorytellerSDK.UserActivity.EventType : Swift.Equatable {}
extension StorytellerSDK.UserActivity.EventType : Swift.Hashable {}
extension StorytellerSDK.UserActivity.EventType : Swift.RawRepresentable {}
extension StorytellerSDK.ClientAdSwipeUpKind : Swift.Equatable {}
extension StorytellerSDK.ClientAdSwipeUpKind : Swift.Hashable {}
extension StorytellerSDK.ClientAdSwipeUpKind : Swift.RawRepresentable {}
extension StorytellerSDK.StorytellerListViewCellType : Swift.Equatable {}
extension StorytellerSDK.StorytellerListViewCellType : Swift.Hashable {}
extension StorytellerSDK.StorytellerListViewCellType : Swift.RawRepresentable {}
extension StorytellerSDK.StorytellerListViewError : Swift.Equatable {}
extension StorytellerSDK.StorytellerListViewError : Swift.Hashable {}
extension StorytellerSDK.StorytellerListViewStyle : Swift.Equatable {}
extension StorytellerSDK.StorytellerListViewStyle : Swift.Hashable {}
extension StorytellerSDK.StorytellerListViewStyle : Swift.RawRepresentable {}
extension StorytellerSDK.Alignment : Swift.Equatable {}
extension StorytellerSDK.Alignment : Swift.Hashable {}
extension StorytellerSDK.Alignment : Swift.RawRepresentable {}
extension StorytellerSDK.StorytellerFontWeight : Swift.Equatable {}
extension StorytellerSDK.StorytellerFontWeight : Swift.Hashable {}
extension StorytellerSDK.TextCasing : Swift.Equatable {}
extension StorytellerSDK.TextCasing : Swift.Hashable {}
extension StorytellerSDK.TextCasing : Swift.RawRepresentable {}
extension StorytellerSDK.UIStyle : Swift.Equatable {}
extension StorytellerSDK.UIStyle : Swift.Hashable {}
extension StorytellerSDK.UIStyle : Swift.RawRepresentable {}
